<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-21T13:44:43+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Lamb写东西的地方</title><subtitle>Too young, too simple. Sometimes naive.</subtitle><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><entry><title type="html">windows共享文件夹的连接不上的解决方案</title><link href="http://localhost:4000/windows%E9%85%8D%E7%BD%AE/2023/07/21/windows%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" rel="alternate" type="text/html" title="windows共享文件夹的连接不上的解决方案" /><published>2023-07-21T13:38:05+08:00</published><updated>2023-07-21T13:38:05+08:00</updated><id>http://localhost:4000/windows%E9%85%8D%E7%BD%AE/2023/07/21/windows%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88</id><content type="html" xml:base="http://localhost:4000/windows%E9%85%8D%E7%BD%AE/2023/07/21/windows%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"><![CDATA[<p>手头有几台机器，想要构建一下网络共享，把几台设备的文件夹都互相映射一下，方便访问。但是在<strong>网络</strong>里面通过ip访问局域网设备时发现出现了<strong>无法访问</strong>的问题，在终端里<code class="language-plaintext highlighter-rouge">ping ip</code>也行不通，搜集资料自己试了之后总结了一下。</p>

<h1 id="共享设置">共享设置</h1>

<h2 id="属性设置">属性设置</h2>

<p>磁盘文件夹当然要设置共享，这个简单，邮件目标磁盘或者文件夹，在<strong>共享</strong>标签页里面打开高级共享进行相应设置就行了
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211313254.png" alt="image.png" /></p>

<p><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211313916.png" alt="image.png" /></p>

<p><strong>网络和共享中心</strong>里面也可以进行相应设置，主要是出于网络和安全性考虑
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211315173.png" alt="image.png" /></p>

<h2 id="检验共享">检验共享</h2>

<p>在资源管理器里面输入<code class="language-plaintext highlighter-rouge">\\localhost</code>访问，可以看到本机共享的文件夹
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211336878.png" alt="image.png" /></p>

<h1 id="防火墙设置">防火墙设置</h1>

<p>文件夹共享设置好了以后，如果不能正常<code class="language-plaintext highlighter-rouge">ping</code>或者在资源管理器访问ip，先关闭防火墙看看有没有问题，如果关闭防火墙正常表现，那就修改一下防火墙规则</p>

<ol>
  <li>在<strong>windows安全中心</strong>里打开<strong>高级设置</strong><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211319812.png" alt="image.png" /></li>
  <li>选择<strong>入站规则</strong>按组筛选<strong>文件和打印机共享</strong><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211322450.png" alt="image.png" /></li>
</ol>

<p>在这些规则里面，有两条和我们的需求相关</p>
<ul>
  <li><strong>文件和打印机共享（回显请求 - ICMPv4）</strong> ：“回显请求”消息是作为 Ping 请求发送到其他节点的；启用这条规则启用ping回显。</li>
  <li><strong>文件和打印机共享（SMB-In）</strong>：用于文件和打印机共享的入站规则，以允许通过命名管道传输和接收服务器消息块；启用这条规则启用smb文件服务。</li>
</ul>

<p>启用后，如果还是不行，那就设置一下规则的<strong>作用域</strong>，双击规则打开子窗口，切换到<strong>作用域</strong>标签页，设置<strong>远程IP地址</strong>，添加自己的目标设备ip
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211334692.png" alt="image.png" />
我这里因为用的组网工具，就填了虚拟局域网里分配的ip，我也不知道为什么不是本地IP
到这里就应该就可以正常远程访问文件夹和ping通机器了</p>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="windows配置" /><category term="windows" /><summary type="html"><![CDATA[手头有几台机器，想要构建一下网络共享，把几台设备的文件夹都互相映射一下，方便访问。但是在网络里面通过ip访问局域网设备时发现出现了无法访问的问题，在终端里ping ip也行不通，搜集资料自己试了之后总结了一下。]]></summary></entry><entry><title type="html">VS中配置Qt并设置应用程序图标</title><link href="http://localhost:4000/qt%20vs/2023/07/19/VS-Qt%E9%85%8D%E7%BD%AE/" rel="alternate" type="text/html" title="VS中配置Qt并设置应用程序图标" /><published>2023-07-19T20:53:47+08:00</published><updated>2023-07-19T20:53:47+08:00</updated><id>http://localhost:4000/qt%20vs/2023/07/19/VS-Qt%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="http://localhost:4000/qt%20vs/2023/07/19/VS-Qt%E9%85%8D%E7%BD%AE/"><![CDATA[<p>在visual studio里配置qt，以及程序的图标设置</p>

<h2 id="requirements">Requirements</h2>

<ul>
  <li>Qt5</li>
</ul>

<h2 id="ide">IDE</h2>

<ul>
  <li>visual studio</li>
</ul>

<h2 id="编译环境配置">编译环境配置</h2>

<h3 id="下载安装visual-studio">下载安装visual studio</h3>

<h3 id="安装qt5">安装Qt5</h3>

<ul>
  <li>在<a href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a>下载合适版本的Qt安装文件，以5.14.2为例（<strong>qt-opensource-windows-x86-5.14.2.exe</strong>）</li>
  <li>下载完成后，运行可执行文件进行安装，完成注册账号和勾选协议之后，在<strong>Select Components</strong>步骤中选择编译组件，此时选择的编译组件应与本地安装visual
studio中编译模块版本一致。（可参考<a href="https://blog.csdn.net/weixin_43961107/article/details/109017275">如何查看Visual Studio版本、与MSVC版本号的对应关系</a>或直接使用vs安装软件查看已安装组件）</li>
</ul>

<h3 id="在visual-studio中安装qt插件qt-vs-tools">在visual studio中安装Qt插件<code class="language-plaintext highlighter-rouge">Qt VS Tools</code></h3>

<ul>
  <li>在<a href="https://download.qt.io/archive/vsaddin/">https://download.qt.io/archive/vsaddin/</a>中安装指定版本的Qt插件（例如：qt-vsaddin-msvc2022-2.8.1-rev.06.vsix），其中MSVC版本需要与visual studio、Qt安装时选择的编译模块版本一致（参考<a href="https://zhuanlan.zhihu.com/p/512594852">Visual Studio+Qt软件安装及环境配置过程和无法设置Qt路径的解决方案</a>）</li>
  <li>关闭visual studio后双击安装文件，按步骤安装即可</li>
  <li>若在visual studio的菜单栏的<strong>扩展</strong>中可以看到<strong>Qt VS Tools</strong>，则说明安装成功</li>
  <li><strong>若visual studio不是最新版本，安装完插件后可能会提示有可更新版本，无视即可</strong></li>
</ul>

<h3 id="配置qt-vs-tools">配置Qt VS Tools</h3>

<ul>
  <li>打开visual studio，在<strong>扩展</strong>中选择<strong>Qt VS Tools</strong>的下级菜单中点击<strong>Qt Options</strong>后进入<strong>Qt Version</strong>或直接点击下级菜单中的<strong>Qt Version</strong>，点击<strong>Add</strong>按钮或<strong>加号</strong>，选择编译器路径（例：<em>“C:\Qt\Qt5.14.2\5.14.2\msvc2017\_64\bin\qmake.exe”</em>）</li>
</ul>

<h3 id="其他配置">其他配置</h3>

<p>由于本地使用visual studio和Qt版本可能不一致，在打开解决方案后有可能无法正常编译，需要在项目属性中进行修改</p>

<ul>
  <li>菜单栏中选择：项目-&gt;属性</li>
  <li>在属性页窗口中进入<strong>Qt Project Settings</strong>，在<strong>Qt Installation</strong>中下拉选择之前配置好的Qt VS Tools中的编译器</li>
  <li>若有必要，在属性页窗口中进入<strong>常规</strong>，调整<strong>平台工具集</strong></li>
</ul>

<h1 id="图标设置">图标设置</h1>

<h2 id="图标制作">图标制作</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">"</span><span class="s">hiseqcomFrame09201-09401-strainY-base10791.jpg</span><span class="sh">"</span><span class="p">)</span>
<span class="n">im</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">im</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2BGRA</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2BGRA</span><span class="p">)</span>
<span class="c1"># 126, 255, 129
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">im</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
<span class="err"> </span> <span class="err"> </span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">im</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="nf">if </span><span class="p">((</span><span class="n">im</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">129</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">im</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">255</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">im</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="mi">126</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">%</span><span class="mi">3</span><span class="n">C</span> <span class="mi">200</span><span class="p">):</span>
<span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="err"> </span> <span class="n">im</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>

<span class="n">cv2</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="sh">"</span><span class="s">tt.png</span><span class="sh">"</span><span class="p">,</span> <span class="n">im</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="应用程序图标设置">应用程序图标设置</h2>

<ol>
  <li>提前准备好图标资源（.ico文件），可以在ico制作网站生成（比如说<a href="https://www.logosc.cn/logo/favicon">Favicon.ico图标生成器</a>）</li>
  <li>在VS资源视图中选中项目右键，添加资源 <img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307192103632.png" alt="image.png" /></li>
  <li>选择icon，导入提前准备好的.ico文件 <img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307192103351.png" alt="image.png" /></li>
  <li>默认资源ID为IDI_ICON1</li>
  <li>重新编译</li>
</ol>

<h2 id="任务栏图标设置">任务栏图标设置</h2>

<ol>
  <li>提前准备好图标资源（.ico文件），可以在ico制作网站生成</li>
  <li>
    <p>将准备好的.ico文件放到项目文件夹中</p>
  </li>
  <li>
    <p>将图标资源添加到.qrc文件中</p>
  </li>
  <li>
    <p>选中解决方案中的.qrc文件，双击打开</p>
  </li>
  <li>
    <p>Add-&gt;Add Files，选择.ico文件<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307192111317.png" alt="image.png" /></p>
  </li>
  <li>Resource URL中是资源的路径</li>
  <li>主程序中添加代码
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">setWindowIcon</span><span class="p">(</span><span class="n">QIcon</span><span class="p">(</span><span class="s">":/Test/Resources/icon1.ico"</span><span class="p">));</span><span class="c1">//设置状态栏图标</span>
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="Qt VS" /><category term="visual studio" /><category term="Qt" /><summary type="html"><![CDATA[在visual studio里配置qt，以及程序的图标设置]]></summary></entry><entry><title type="html">基于Qt的桌面镜面翻转程序</title><link href="http://localhost:4000/qt/2023/07/17/%E5%9F%BA%E4%BA%8EQt%E7%9A%84%E6%A1%8C%E9%9D%A2%E9%95%9C%E9%9D%A2%E7%BF%BB%E8%BD%AC%E7%A8%8B%E5%BA%8F/" rel="alternate" type="text/html" title="基于Qt的桌面镜面翻转程序" /><published>2023-07-17T09:08:23+08:00</published><updated>2023-07-17T09:08:23+08:00</updated><id>http://localhost:4000/qt/2023/07/17/%E5%9F%BA%E4%BA%8EQt%E7%9A%84%E6%A1%8C%E9%9D%A2%E9%95%9C%E9%9D%A2%E7%BF%BB%E8%BD%AC%E7%A8%8B%E5%BA%8F</id><content type="html" xml:base="http://localhost:4000/qt/2023/07/17/%E5%9F%BA%E4%BA%8EQt%E7%9A%84%E6%A1%8C%E9%9D%A2%E9%95%9C%E9%9D%A2%E7%BF%BB%E8%BD%AC%E7%A8%8B%E5%BA%8F/"><![CDATA[<p>windows桌面可以横向、纵向翻转显示桌面，但是不能对屏幕进行镜像翻转，当然基本上也不会有人有这种奇怪的需求。<a href="https://www.realtimesoft.com/ultramon/">UltraMon</a>可以实现这个功能，在扩展屏上镜像覆盖主屏幕，此外，这个软件本身也有很多很强大的功能。但是在主屏幕缩放比例超过100%时会无法正确显示，每次使用的时候都重新设置一下分辨率和缩放比例显得还是有些奇怪了。
于是自己写了一个基于Qt的镜像翻转桌面的小程序，基本的原理就是捕获主屏幕的画面，将图像镜像翻转后显示在窗口内。
<strong>如果想直接下载使用可以参考<a href="#github">github页面</a>的<a href="#download">下载</a>链接。</strong></p>

<p>看看效果先：
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307170907586.png" alt="扩展模式的双屏幕示例，右下为主屏幕，左上为扩展屏幕" /></p>

<h1 id="捕获窗口">捕获窗口</h1>
<p><code class="language-plaintext highlighter-rouge">QPixmap QScreen::grabWindow(WId window = 0, int x = 0, int y = 0, int width = -1, int height = -1)</code>可以实现指定句柄的窗口捕获，但是美中不足的是没有办法捕获到鼠标。
函数<code class="language-plaintext highlighter-rouge">grW(HWND winId, int x, int y, int w, int h)</code><a href="#grW">参考附录1</a>，实现了捕获桌面的同时也捕获鼠标，在使用时需要在Qt的设置中添加<code class="language-plaintext highlighter-rouge">winextras</code>组件。
<code class="language-plaintext highlighter-rouge">winId</code>是窗口句柄，获取主桌面的句柄可以借助以下语句实现：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">screen</span> <span class="o">=</span> <span class="n">QGuiApplication</span><span class="o">::</span><span class="n">primaryScreen</span><span class="p">();</span>
</code></pre></div></div>
<p>获取窗口后，将图像进行镜面翻转后再嵌入窗口中，这个功能可能借助Qt自带的<code class="language-plaintext highlighter-rouge">QImage QImage::mirrored(bool horizontal = false, bool vertical = true)</code>函数实现，两个参数分别为水平方向和垂直方向的翻转与否。</p>
<h1 id="定时触发">定时触发</h1>
<p>搞定了桌面和鼠标捕获，其实基本上就完成了主要工作，接下来只要设置一个定时器实时触发桌面捕获和显示的槽函数就可以了。</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">connect</span><span class="p">(</span><span class="n">timer</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">timeout</span><span class="p">()),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">timeoutSlot</span><span class="p">()));</span>
	<span class="n">timer</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>
<p>定时器的触发间隔看需求了，虽然代码里设置了2毫秒，实际上也达不到这么快的速度，考虑到只在本地执行，也没有加上缓存区存储图像。</p>
<h1 id="全屏切换">全屏切换</h1>
<p>毕竟是用窗口覆盖了桌面，在显示的时候还是全屏遮盖掉其他应用和任务栏比较好，重构一下鼠标双击事件：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">screenRelayer</span><span class="o">::</span><span class="n">mouseDoubleClickEvent</span><span class="p">(</span><span class="n">QMouseEvent</span><span class="o">*</span> <span class="n">mouseEvent</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">//showFlag为标志位</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">showFlag</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">showFullScreen</span><span class="p">();</span>
		<span class="n">showFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">showNormal</span><span class="p">();</span>
		<span class="n">showFlag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这样就可以在窗口内通过双击鼠标切换全屏和窗口了。</p>

<h1 id="附录">附录</h1>
<ol>
  <li>
    <p><span id="grW">窗口捕获函数实现<a href="#refer-anchor-1"><sup>1</sup></a></span></p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">QPixmap</span> <span class="n">screenRelayer</span><span class="o">::</span><span class="n">grW</span><span class="p">(</span><span class="n">HWND</span> <span class="n">winId</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="kt">int</span> <span class="n">h</span><span class="p">)</span>
 <span class="p">{</span>

     <span class="n">RECT</span> <span class="n">r</span><span class="p">;</span>
     <span class="n">GetClientRect</span><span class="p">(</span><span class="n">winId</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">);</span>

     <span class="k">if</span> <span class="p">(</span><span class="n">w</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">w</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">right</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">left</span><span class="p">;</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">h</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">bottom</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>

     <span class="n">HDC</span> <span class="n">display_dc</span> <span class="o">=</span> <span class="n">GetDC</span><span class="p">(</span><span class="n">winId</span><span class="p">);</span>
     <span class="n">HDC</span> <span class="n">bitmap_dc</span> <span class="o">=</span> <span class="n">CreateCompatibleDC</span><span class="p">(</span><span class="n">display_dc</span><span class="p">);</span>
     <span class="n">HBITMAP</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">CreateCompatibleBitmap</span><span class="p">(</span><span class="n">display_dc</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">);</span>
     <span class="n">HGDIOBJ</span> <span class="n">null_bitmap</span> <span class="o">=</span> <span class="n">SelectObject</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">,</span> <span class="n">bitmap</span><span class="p">);</span>

     <span class="n">BitBlt</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">display_dc</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">SRCCOPY</span> <span class="o">|</span> <span class="n">CAPTUREBLT</span><span class="p">);</span>

     <span class="n">CURSORINFO</span> <span class="n">ci</span><span class="p">;</span>
     <span class="n">ci</span><span class="p">.</span><span class="n">cbSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CURSORINFO</span><span class="p">);</span>
     <span class="n">GetCursorInfo</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ci</span><span class="p">);</span>
     <span class="k">if</span> <span class="p">((</span><span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">w</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="n">h</span><span class="p">)))</span>
         <span class="n">DrawIcon</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">,</span> <span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">x</span><span class="p">,</span> <span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">y</span><span class="p">,</span> <span class="n">ci</span><span class="p">.</span><span class="n">hCursor</span><span class="p">);</span>

     <span class="c1">// clean up all but bitmap</span>
     <span class="n">ReleaseDC</span><span class="p">(</span><span class="n">winId</span><span class="p">,</span> <span class="n">display_dc</span><span class="p">);</span>
     <span class="n">SelectObject</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">,</span> <span class="n">null_bitmap</span><span class="p">);</span>
     <span class="n">DeleteDC</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">);</span>

     <span class="n">QPixmap</span> <span class="n">pixmap</span> <span class="o">=</span> <span class="n">QtWin</span><span class="o">::</span><span class="n">fromHBITMAP</span><span class="p">(</span><span class="n">bitmap</span><span class="p">);</span>

     <span class="n">DeleteObject</span><span class="p">(</span><span class="n">bitmap</span><span class="p">);</span>

     <span class="k">return</span> <span class="n">pixmap</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>链接：
 <span id="github"><a href="https://github.com/Braised-Lamb/screenRelayer">https://github.com/Braised-Lamb/screenRelayer</a></span>
 <span id="download"><a href="https://github.com/Braised-Lamb/screenRelayer/releases/download/v1.0/screenRelayer-v1.0.zip">软件下载</a></span></p>
    <h1 id="参考">参考</h1>
  </li>
</ol>
<div id="refer-anchor-1"></div>

<ul>
  <li>[1] <a href="https://blog.csdn.net/qq_28581781/article/details/99644729">windows 下使用Qt抓取桌面和鼠标</a></li>
</ul>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="Qt" /><category term="Qt" /><summary type="html"><![CDATA[windows桌面可以横向、纵向翻转显示桌面，但是不能对屏幕进行镜像翻转，当然基本上也不会有人有这种奇怪的需求。UltraMon可以实现这个功能，在扩展屏上镜像覆盖主屏幕，此外，这个软件本身也有很多很强大的功能。但是在主屏幕缩放比例超过100%时会无法正确显示，每次使用的时候都重新设置一下分辨率和缩放比例显得还是有些奇怪了。 于是自己写了一个基于Qt的镜像翻转桌面的小程序，基本的原理就是捕获主屏幕的画面，将图像镜像翻转后显示在窗口内。 如果想直接下载使用可以参考github页面的下载链接。]]></summary></entry><entry><title type="html">ubuntu服务器配置clash</title><link href="http://localhost:4000/ubuntu%E9%85%8D%E7%BD%AE/2023/07/14/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEclash/" rel="alternate" type="text/html" title="ubuntu服务器配置clash" /><published>2023-07-14T19:30:45+08:00</published><updated>2023-07-14T19:30:45+08:00</updated><id>http://localhost:4000/ubuntu%E9%85%8D%E7%BD%AE/2023/07/14/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEclash</id><content type="html" xml:base="http://localhost:4000/ubuntu%E9%85%8D%E7%BD%AE/2023/07/14/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEclash/"><![CDATA[<p>最近把实验室的服务器弄了一下，装了个clash，但是远程图形化桌面老是搞不定，查了一些资料实现了在web面板里调整设置</p>

<h1 id="安装clash">安装clash</h1>
<ul>
  <li>github仓库地址：<code class="language-plaintext highlighter-rouge">https://github.com/Dreamacro/clash/releases </code></li>
</ul>

<p>在合适位置新建文件夹<code class="language-plaintext highlighter-rouge">Clash</code>，使用命令行<code class="language-plaintext highlighter-rouge">mkdir</code>新建文件夹，本文使用目录为 <code class="language-plaintext highlighter-rouge">~/Clash</code>，在Clash文件夹里下载clash文件</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/Clash 
<span class="nb">cd</span> ~/Clash
wget <span class="nt">-O</span> https://github.com/Dreamacro/clash/releases/download/v1.17.0/clash-linux-386-v1.17.0.gz
</code></pre></div></div>
<p>解压文件，设置读写权限，重命名</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">gzip</span> <span class="nt">-d</span> clash-linux-386-v1.17.0.gz <span class="c">#解压 </span>
<span class="nb">mv </span>clash-linux-386-v1.17.0.gz clash <span class="c">#修改为clash</span>
<span class="nb">chmod</span> +x Clash/clash <span class="c">#添加执行权限</span>
</code></pre></div></div>

<h1 id="配置">配置</h1>

<h2 id="clash配置">clash配置</h2>

<p>执行命令运行clash</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./clash
</code></pre></div></div>
<p>初次运行会有提示下载初始配置文件在<code class="language-plaintext highlighter-rouge">~/.config/clash/</code>，包含<code class="language-plaintext highlighter-rouge">config.yaml</code>和<code class="language-plaintext highlighter-rouge">Country.mmdb</code>
提示如下：</p>
<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">INFO[0000] Can't find config, create a initial config file 
INFO[0000] Can't find MMDB, start download              
INFO[0002] Mixed(http+socks) proxy listening at: 127.0.0.1:7890 
</span></code></pre></div></div>
<p>要配置自己的配置文件，在<code class="language-plaintext highlighter-rouge">clash</code>文件夹里下载订阅的<code class="language-plaintext highlighter-rouge">config.yaml</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-O</span> &lt;clash订阅地址&gt;
</code></pre></div></div>

<h2 id="代理配置">代理配置</h2>

<p>在使用clash的时候，考虑到诸如git、conda、python等环境都有可能使用代理，直接进行全局代理的设置，由clash来决定代理规则
在<code class="language-plaintext highlighter-rouge">~/.bashrc</code>末尾添加语句</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># clash proxy</span>
<span class="nb">alias </span><span class="nv">setProxy</span><span class="o">=</span><span class="s1">'export http_proxy=http://127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890;export HTTP_PROXY=http://127.0.0.1:7890;export HTTPS_PROXY=http://127.0.0.1:7890'</span>
<span class="nb">alias </span><span class="nv">unsetProxy</span><span class="o">=</span><span class="s1">'unset http_proxy;unset https_proxy;unset HTTP_PROXY;unset HTTPS_PROXY'</span>
<span class="si">$(</span>setProxy<span class="si">)</span>
</code></pre></div></div>
<p>将<code class="language-plaintext highlighter-rouge">setProxy </code>注册为设置代理，<code class="language-plaintext highlighter-rouge">unsetProxy</code>为取消设置，可以直接在shell中运行
<code class="language-plaintext highlighter-rouge">$(setProxy)</code>表示在<code class="language-plaintext highlighter-rouge">.bashrc</code>文件里执行设置代理</p>

<p>使用<code class="language-plaintext highlighter-rouge">env | grep proxy</code>和<code class="language-plaintext highlighter-rouge">env | grep PROXY</code>验证设置情况</p>

<h1 id="可视化面板">可视化面板</h1>
<p>在<code class="language-plaintext highlighter-rouge">~/.config/clash/</code>文件夹里下载<code class="language-plaintext highlighter-rouge">gh-pages</code>仓库编译好的文件</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone <span class="nt">-b</span> gh-pages https://github.com/Dreamacro/clash-dashboard ui
</code></pre></div></div>
<p>同时在<code class="language-plaintext highlighter-rouge">config.yaml</code>里设置端口和密钥</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># A RESTful API for clash</span>
<span class="na">external-controller</span><span class="pi">:</span> <span class="s">&lt;host_ip&gt;:&lt;port&gt;</span>
<span class="na">external-ui</span><span class="pi">:</span> <span class="s">ui</span>

<span class="c1"># Secret for RESTful API (Optional)</span>
<span class="na">secret</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;secret&gt;"</span>
</code></pre></div></div>
<p>其中，<code class="language-plaintext highlighter-rouge">&lt;host_ip&gt;</code>修改为合适的ip，<code class="language-plaintext highlighter-rouge">&lt;port&gt;</code>设置为合适的端口，如果本地使用，用<code class="language-plaintext highlighter-rouge">127.0.0.1</code>，如果希望在局域网访问，就用服务器在局域网内的ip
在<code class="language-plaintext highlighter-rouge">http://yacd.haishan.me/</code>填写配置访问面板，URL使用<code class="language-plaintext highlighter-rouge">http://&lt;host_ip&gt;:&lt;port&gt;</code>
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307152011152.png" alt="image.png" /></p>

<p>连接成功后可以访问面板：
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307152011163.png" alt="image.png" /></p>

<h1 id="启动方式一注册服务">启动方式一：注册服务</h1>

<p>完成以上工作后，已经实现了clash的安装和配置，美中不足的地方在于，这样在终端启动的方法，需要保持前台活跃，也就是要一直留着一个窗口给clash
可以将clash注册为服务，实现开机启动和后台运行，新建文件</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/systemd/system/clash.service
</code></pre></div></div>
<p>内容填充为：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit] 
Description=clash service 
After=network.target 

[Service] 
Type=simple 
User=root # 用户名
ExecStart=~/Clash/clash # clash文件路径 
Restart=on-failure # or always, on-abort, etc 

[Install] 
WantedBy=multi-user.target
</code></pre></div></div>
<p>设置开机自启</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload 
systemctl <span class="nb">enable </span>clash
</code></pre></div></div>

<p>之后也可以用以下语句启动clash</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service clash start
</code></pre></div></div>

<h1 id="启动方式二bashrc文件配置">启动方式二：.bashrc文件配置</h1>

<p>在<code class="language-plaintext highlighter-rouge">.bashrc</code>文件里添加以下语句</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">clashOn</span><span class="o">=</span><span class="s1">'nohup ~/Clash/clash &gt; /dev/null 2&gt;&amp;1 &amp;'</span>
<span class="nb">alias </span><span class="nv">clashOff</span><span class="o">=</span><span class="s1">'kill $(pgrep -f clash)'</span>
<span class="si">$(</span>clashOn<span class="si">)</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">clashOn</code>实现后台启动clash
<code class="language-plaintext highlighter-rouge">clashOff</code>实现停止clash进程
可以通过<code class="language-plaintext highlighter-rouge">ps -ef | grep clash</code>来验证clash服务运行情况</p>

<h1 id="参考">参考</h1>
<p><a href="https://www.xxpyy.top/detailed?id=14">在 Linux 服务器上安装 Clash，以及开机自动启动</a></p>

<p><a href="https://www.duckflew.cn/archives/fu-wu-qi-shang-pei-zhi-c-l-a-s-h">服务器上配置clash - 真是古得</a></p>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="ubuntu配置" /><category term="ubuntu" /><category term="clash" /><summary type="html"><![CDATA[最近把实验室的服务器弄了一下，装了个clash，但是远程图形化桌面老是搞不定，查了一些资料实现了在web面板里调整设置]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2023/07/14/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-07-14T17:15:17+08:00</published><updated>2023-07-14T17:15:17+08:00</updated><id>http://localhost:4000/jekyll/update/2023/07/14/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/07/14/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>