<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-08T01:31:12+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Lamb写东西的地方</title><subtitle>Too young, too simple. Sometimes naive.</subtitle><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><entry><title type="html">Win平台qt配置mysql</title><link href="http://localhost:4000/qt/2025/06/08/win%E5%B9%B3%E5%8F%B0Qt%E9%85%8D%E7%BD%AEMySql/" rel="alternate" type="text/html" title="Win平台qt配置mysql" /><published>2025-06-08T01:27:00+08:00</published><updated>2025-06-08T01:27:00+08:00</updated><id>http://localhost:4000/qt/2025/06/08/win%E5%B9%B3%E5%8F%B0Qt%E9%85%8D%E7%BD%AEMySql</id><content type="html" xml:base="http://localhost:4000/qt/2025/06/08/win%E5%B9%B3%E5%8F%B0Qt%E9%85%8D%E7%BD%AEMySql/"><![CDATA[<p>用于windows平台下基于MSVC的Qt和MySql配置</p>

<h1 id="qt安装">Qt安装</h1>

<p>Qt安装的时候要选择source，用于编译mysql驱动</p>

<p><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/cb5368eb6c66f5fd59f58cb680d58a20_MD5.jpeg" alt="" /></p>

<p><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/1006342a81b6be28a1334a92848abe6b_MD5.jpeg" alt="" /></p>

<p>CDB下载：<a href="https://download.microsoft.com/download/4/2/2/42245968-6A79-4DA7-A5FB-08C0AD0AE661/windowssdk/winsdksetup.exe">winsdksetup.exe</a></p>

<p><strong><em>需要选择对应MSVC编译器版本</em></strong></p>

<p><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/d79610ebcf9b0c31c50e4d929627775a_MD5.jpeg" alt="" /></p>

<h1 id="编译qmysql驱动">编译qmysql驱动</h1>

<p>在Qt的source文件夹在找到mysql.pro工程，具体路径为：<code class="language-plaintext highlighter-rouge">${QT_DIR}\Src\qtbase\src\plugins\sqldrivers\mysql</code></p>

<p>用Qt Creator打开mysql.pro文件，修改对应文件</p>

<p>mysql.pro</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TARGET</span> <span class="o">=</span> <span class="n">qsqlmysql</span>

<span class="n">HEADERS</span> <span class="o">+=</span> <span class="err">$$</span><span class="n">PWD</span><span class="o">/</span><span class="n">qsql_mysql_p</span><span class="p">.</span><span class="n">h</span>
<span class="n">SOURCES</span> <span class="o">+=</span> <span class="err">$$</span><span class="n">PWD</span><span class="o">/</span><span class="n">qsql_mysql</span><span class="p">.</span><span class="n">cpp</span> <span class="err">$$</span><span class="n">PWD</span><span class="o">/</span><span class="n">main</span><span class="p">.</span><span class="n">cpp</span>


<span class="cp"># QMAKE_USE += mysql
</span>

<span class="n">OTHER_FILES</span> <span class="o">+=</span> <span class="n">mysql</span><span class="p">.</span><span class="n">json</span>


<span class="n">PLUGIN_CLASS_NAME</span> <span class="o">=</span> <span class="n">QMYSQLDriverPlugin</span>
<span class="n">include</span><span class="p">(..</span><span class="o">/</span><span class="n">qsqldriverbase</span><span class="p">.</span><span class="n">pri</span><span class="p">)</span>
  

<span class="cp">#这个主要是添加.h依赖文件使用
</span><span class="n">INCLUDEPATH</span><span class="o">+=</span><span class="s">"C:\Program Files\MySQL\MySQL Server 8.0\include"</span>

<span class="cp">#添加依赖的.lib文件
</span><span class="n">LIBS</span><span class="o">+=</span><span class="s">"C:\Program Files\MySQL\MySQL Server 8.0\lib\libmysql.lib"</span>

<span class="cp">#生成你所需要的dll存放目录
</span><span class="n">DESTDIR</span><span class="o">=</span><span class="s">"C:\plugins\sqldrivers"</span>
</code></pre></div></div>

<p>qsqldriverbase.pri</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">QT</span>  <span class="o">=</span> <span class="n">core</span> <span class="n">core</span><span class="o">-</span><span class="n">private</span> <span class="n">sql</span><span class="o">-</span><span class="n">private</span>

<span class="cp"># For QMAKE_USE in the parent projects.
# include($$shadowed($$PWD)/qtsqldrivers-config.pri)
</span><span class="n">include</span><span class="p">(.</span><span class="o">/</span><span class="n">configure</span><span class="p">.</span><span class="n">pri</span><span class="p">)</span>

<span class="n">PLUGIN_TYPE</span> <span class="o">=</span> <span class="n">sqldrivers</span>
<span class="n">load</span><span class="p">(</span><span class="n">qt_plugin</span><span class="p">)</span>
  
<span class="n">DEFINES</span> <span class="o">+=</span> <span class="n">QT_NO_CAST_TO_ASCII</span> <span class="n">QT_NO_CAST_FROM_ASCII</span>
</code></pre></div></div>

<p>修改完成后，选择合适的编译套件（MSVC或者MinGW）构建工程，在输出文件夹里得到了两个dll文件，qsqlmysql.dll和qsqlmysqld.dll</p>

<h1 id="拷贝文件">拷贝文件</h1>

<ol>
  <li>qsqlmysql.dll、qsqlmysqld.dll：复制到对应编译器文件夹下，例如：<code class="language-plaintext highlighter-rouge">${QT_DIR}\msvc2017_64\plugins\sqldrivers</code></li>
  <li>libmysql.dll：从MySQL的安装文件夹下复制到Qt的文件夹下，<code class="language-plaintext highlighter-rouge">C:\Program Files\MySQL\MySQL Server 8.0\lib</code>到<code class="language-plaintext highlighter-rouge">C:\Qt\Qt5.14.2\5.14.2\msvc2017_64\bin</code></li>
  <li>libcrypto-3-x64.dll、libssl-3-x64.dll：<code class="language-plaintext highlighter-rouge">C:\Program Files\MySQL\MySQL Server 8.0\bin</code>到<code class="language-plaintext highlighter-rouge">C:\Qt\Qt5.14.2\5.14.2\msvc2017_64\bin</code></li>
</ol>

<h1 id="测试">测试</h1>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cp">#include</span> <span class="cpf">"mainwindow.h"</span><span class="c1">        // *****注意****</span><span class="cp">
</span>
<span class="cp">#include</span><span class="cpf">&lt;QSqlDatabase&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;QApplication&gt;</span><span class="cp">
#include</span><span class="cpf">&lt;QMessageBox&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;QSqlError&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;QDebug&gt;</span><span class="cp">
</span>  
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">QApplication</span> <span class="n">a</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
    <span class="n">MainWindow</span> <span class="n">w</span><span class="p">;</span>            <span class="c1">//*****替换一下*****</span>
    <span class="n">w</span><span class="p">.</span><span class="n">show</span><span class="p">();</span>
  
    <span class="n">QSqlDatabase</span> <span class="n">db</span> <span class="o">=</span> <span class="n">QSqlDatabase</span><span class="o">::</span><span class="n">addDatabase</span><span class="p">(</span><span class="s">"QMYSQL"</span><span class="p">);</span>
        <span class="n">db</span><span class="p">.</span><span class="n">setHostName</span><span class="p">(</span><span class="s">"127.0.0.1"</span><span class="p">);</span>  <span class="c1">//连接本地主机</span>
        <span class="n">db</span><span class="p">.</span><span class="n">setPort</span><span class="p">(</span><span class="mi">3306</span><span class="p">);</span>             <span class="c1">//端口号，默认的</span>
        <span class="n">db</span><span class="p">.</span><span class="n">setDatabaseName</span><span class="p">(</span><span class="s">"mysql"</span><span class="p">);</span>     <span class="c1">//数据库名</span>
        <span class="n">db</span><span class="p">.</span><span class="n">setUserName</span><span class="p">(</span><span class="s">"root"</span><span class="p">);</span>         <span class="c1">//用户</span>
        <span class="n">db</span><span class="p">.</span><span class="n">setPassword</span><span class="p">(</span><span class="s">"mysql"</span><span class="p">);</span>  <span class="c1">//密码</span>
        <span class="kt">bool</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="n">open</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ok</span><span class="p">){</span>
            <span class="n">QMessageBox</span><span class="o">::</span><span class="n">information</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">"infor"</span><span class="p">,</span> <span class="s">"link success"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="n">QMessageBox</span><span class="o">::</span><span class="n">information</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">"infor"</span><span class="p">,</span> <span class="s">"link failed"</span><span class="p">);</span>
           <span class="c1">// qDebug()&lt;&lt;"error open database because"&lt;&lt;db.lastError().text();</span>
        <span class="p">}</span>
        <span class="n">QSqlError</span> <span class="n">error</span><span class="p">;</span>
        <span class="n">error</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="n">lastError</span><span class="p">();</span>
        <span class="k">if</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">isValid</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="k">switch</span><span class="p">(</span><span class="n">error</span><span class="p">.</span><span class="n">type</span><span class="p">())</span>
            <span class="p">{</span>
            <span class="k">case</span> <span class="n">QSqlError</span><span class="o">::</span><span class="n">NoError</span><span class="p">:</span>
                <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">"no error"</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">QSqlError</span><span class="o">::</span><span class="n">ConnectionError</span><span class="p">:</span>
                <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="p">.</span><span class="n">text</span><span class="p">();</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">QSqlError</span><span class="o">::</span><span class="n">StatementError</span><span class="p">:</span>
                <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="p">.</span><span class="n">text</span><span class="p">();</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="n">QSqlError</span><span class="o">::</span><span class="n">TransactionError</span><span class="p">:</span>
                <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="p">.</span><span class="n">text</span><span class="p">();</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="nl">default:</span>
                <span class="n">qDebug</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">error</span><span class="p">.</span><span class="n">text</span><span class="p">();</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">exec</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>测试成功：</p>

<p><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/f460619642bc046b4fd2b902371970d7_MD5.jpeg" alt="image.png" /></p>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="qt" /><category term="qt" /><category term="MySql" /><summary type="html"><![CDATA[用于windows平台下基于MSVC的Qt和MySql配置]]></summary></entry><entry><title type="html">Pycharm快捷键</title><link href="http://localhost:4000/pycharm/2023/12/06/PyCharm%E5%BF%AB%E6%8D%B7%E9%94%AE/" rel="alternate" type="text/html" title="Pycharm快捷键" /><published>2023-12-06T10:15:00+08:00</published><updated>2023-12-06T10:15:00+08:00</updated><id>http://localhost:4000/pycharm/2023/12/06/PyCharm%E5%BF%AB%E6%8D%B7%E9%94%AE</id><content type="html" xml:base="http://localhost:4000/pycharm/2023/12/06/PyCharm%E5%BF%AB%E6%8D%B7%E9%94%AE/"><![CDATA[<p>PyCharm的快捷键记录，转自 <a href="https://www.cnblogs.com/echohye/p/15419237.html">https://www.cnblogs.com/echohye/p/15419237.html</a>，如有侵权，请联系删除。</p>

<ul>
  <li><strong>原文作者：</strong> <a href="https://www.cnblogs.com/echohye">北风几吹夏</a></li>
  <li><strong>原文链接：</strong> <a href="https://www.cnblogs.com/echohye/p/15419237.html">https://www.cnblogs.com/echohye/p/15419237.html</a></li>
</ul>

<h1 id="常用快捷键">常用快捷键</h1>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Ctrl + Q</td>
      <td>快速查看文档</td>
    </tr>
    <tr>
      <td>Ctrl + F1</td>
      <td>显示错误描述或警告信息</td>
    </tr>
    <tr>
      <td>Ctrl + /</td>
      <td>行注释（可选中多行）</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + L</td>
      <td>代码格式化</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + O</td>
      <td>自动导入</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + I</td>
      <td>自动缩进</td>
    </tr>
    <tr>
      <td>Tab / Shift + Tab</td>
      <td>缩进、不缩进当前行（可选中多行）</td>
    </tr>
    <tr>
      <td>Ctrl+C/Ctrl+Insert</td>
      <td>复制当前行或选定的代码块到剪贴板</td>
    </tr>
    <tr>
      <td>Ctrl + D</td>
      <td>复制选定的区域</td>
    </tr>
    <tr>
      <td>Ctrl + Y</td>
      <td>删除当前行</td>
    </tr>
    <tr>
      <td>Shift + Enter</td>
      <td>换行（不用鼠标操作了）</td>
    </tr>
    <tr>
      <td>Ctrl +Ｊ</td>
      <td>插入模版</td>
    </tr>
    <tr>
      <td>Ctrl + Shift +/-</td>
      <td>展开/折叠全部代码块</td>
    </tr>
    <tr>
      <td>Ctrl + Numpad+</td>
      <td>全部展开</td>
    </tr>
    <tr>
      <td>Ctrl + Numpad-</td>
      <td>全部折叠</td>
    </tr>
    <tr>
      <td>Ctrl + Delete</td>
      <td>删除到字符结束</td>
    </tr>
    <tr>
      <td>Ctrl + Backspace</td>
      <td>删除到字符开始</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + F7</td>
      <td>将当前单词在整个文件中高亮，F3移动到下一个，ESC取消高亮。</td>
    </tr>
    <tr>
      <td>Alt + up/down</td>
      <td>方法上移或下移动</td>
    </tr>
    <tr>
      <td>Alt + Shift + up/down</td>
      <td>当前行上移或下移动</td>
    </tr>
    <tr>
      <td>Ctrl + B/鼠标左键</td>
      <td>转到方法定义处</td>
    </tr>
    <tr>
      <td>Ctrl + W</td>
      <td>选中增加的代码块</td>
    </tr>
    <tr>
      <td>Shift + F6</td>
      <td>方法或变量重命名</td>
    </tr>
    <tr>
      <td>Ctrl + E</td>
      <td>最近访问的文件</td>
    </tr>
    <tr>
      <td>Esc</td>
      <td>从其他窗口回到编辑窗口</td>
    </tr>
    <tr>
      <td>Shift + Esc</td>
      <td>隐藏当前窗口，焦点到编辑窗口</td>
    </tr>
    <tr>
      <td>F12</td>
      <td>回到先前的工具窗口</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + up</td>
      <td>快速上移某一行</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + down</td>
      <td>快速下移某一行</td>
    </tr>
    <tr>
      <td>ctrl+alt+左箭头</td>
      <td>返回上一个光标的位置（CTRL进入函数后返回）</td>
    </tr>
    <tr>
      <td>ctrl+alt+右箭头</td>
      <td>前进到后一个光标的位置</td>
    </tr>
  </tbody>
</table>

<h1 id="全部快捷键">全部快捷键</h1>

<h2 id="编辑editing">编辑（Editing）</h2>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Ctrl + Space</td>
      <td>基本的代码完成（类、方法、属性）</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + Space</td>
      <td>快速导入任意类</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + Enter</td>
      <td>语句完成</td>
    </tr>
    <tr>
      <td>Ctrl + P</td>
      <td>参数信息（在方法中调用参数）</td>
    </tr>
    <tr>
      <td>Ctrl + Q</td>
      <td>快速查看文档</td>
    </tr>
    <tr>
      <td>Shift + F1</td>
      <td>外部文档</td>
    </tr>
    <tr>
      <td>Ctrl + 鼠标</td>
      <td>简介</td>
    </tr>
    <tr>
      <td>Ctrl + F1</td>
      <td>显示错误描述或警告信息</td>
    </tr>
    <tr>
      <td>Alt + Insert</td>
      <td>自动生成代码</td>
    </tr>
    <tr>
      <td>Ctrl + O</td>
      <td>重新方法</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + T</td>
      <td>选中</td>
    </tr>
    <tr>
      <td>Ctrl + /</td>
      <td>行注释</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + /</td>
      <td>块注释</td>
    </tr>
    <tr>
      <td>Ctrl + W</td>
      <td>选中增加的代码块</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + W</td>
      <td>回到之前状态</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + ]/[</td>
      <td>选定代码块结束、开始</td>
    </tr>
    <tr>
      <td>Alt + Enter</td>
      <td>快速修正</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + L</td>
      <td>代码格式化</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + O</td>
      <td>自动导入</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + I</td>
      <td>自动缩进</td>
    </tr>
    <tr>
      <td>Tab / Shift + Tab</td>
      <td>缩进、不缩进当前行</td>
    </tr>
    <tr>
      <td>Ctrl+X/Shift+Delete</td>
      <td>剪切当前行或选定的代码块到剪贴板</td>
    </tr>
    <tr>
      <td>Ctrl+C/Ctrl+Insert</td>
      <td>复制当前行或选定的代码块到剪贴板</td>
    </tr>
    <tr>
      <td>Ctrl+V/Shift+Insert</td>
      <td>从剪贴板粘贴</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + V</td>
      <td>从最近的缓冲区粘贴</td>
    </tr>
    <tr>
      <td>Ctrl + D</td>
      <td>复制选定的区域或行到后面或下一行</td>
    </tr>
    <tr>
      <td>Ctrl + Y</td>
      <td>删除当前行</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + J</td>
      <td>添加智能线</td>
    </tr>
    <tr>
      <td>Ctrl + Enter</td>
      <td>智能线切割</td>
    </tr>
    <tr>
      <td>Shift + Enter</td>
      <td>下一行另起一行</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + U</td>
      <td>在选定的区域或代码块间切换</td>
    </tr>
    <tr>
      <td>Ctrl + Delete</td>
      <td>删除到字符结束</td>
    </tr>
    <tr>
      <td>Ctrl + Backspace</td>
      <td>删除到字符开始</td>
    </tr>
    <tr>
      <td>Ctrl + Numpad+/-</td>
      <td>展开折叠代码块</td>
    </tr>
    <tr>
      <td>Ctrl + Numpad+</td>
      <td>全部展开</td>
    </tr>
    <tr>
      <td>Ctrl + Numpad-</td>
      <td>全部折叠</td>
    </tr>
    <tr>
      <td>Ctrl + F4</td>
      <td>关闭运行的选项卡</td>
    </tr>
  </tbody>
</table>

<h2 id="查找替换searchreplace">查找/替换(Search/Replace)</h2>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>F3</td>
      <td>下一个</td>
    </tr>
    <tr>
      <td>Shift + F3</td>
      <td>前一个</td>
    </tr>
    <tr>
      <td>Ctrl + R</td>
      <td>替换</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + F</td>
      <td>全局查找</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + R</td>
      <td>全局替换</td>
    </tr>
  </tbody>
</table>

<h2 id="运行running">运行(Running)</h2>
<p>| 快捷键 | 功能 |
| — | — |
| Alt + Shift + F10 | 运行模式配置 |
| Alt + Shift + F9 | 调试模式配置 |
| Shift + F10 | 运行 |
| Shift + F9 | 调试 |
| Ctrl + Shift + F10 | 运行编辑器配置 |
| Ctrl + Alt + R | 运行manage.py任务 |</p>

<h2 id="调试debugging">调试(Debugging)</h2>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>F8</td>
      <td>跳过</td>
    </tr>
    <tr>
      <td>F7</td>
      <td>进入</td>
    </tr>
    <tr>
      <td>Shift + F8</td>
      <td>退出</td>
    </tr>
    <tr>
      <td>Alt + F9</td>
      <td>运行游标</td>
    </tr>
    <tr>
      <td>Alt + F8</td>
      <td>验证表达式</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + F8</td>
      <td>快速验证表达式</td>
    </tr>
    <tr>
      <td>F9</td>
      <td>恢复程序</td>
    </tr>
    <tr>
      <td>Ctrl + F8</td>
      <td>断点开关</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + F8</td>
      <td>查看断点</td>
    </tr>
  </tbody>
</table>

<h2 id="导航navigation">导航(Navigation)</h2>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Ctrl + N</td>
      <td>跳转到类</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + Shift + N</td>
      <td>跳转到符号</td>
      <td> </td>
    </tr>
    <tr>
      <td>Alt + Right/Left</td>
      <td>跳转到下一个、前一个编辑的选项卡</td>
      <td> </td>
    </tr>
    <tr>
      <td>F12</td>
      <td>回到先前的工具窗口</td>
      <td> </td>
    </tr>
    <tr>
      <td>Esc</td>
      <td>从其他窗口回到编辑窗口</td>
      <td> </td>
    </tr>
    <tr>
      <td>Shift + Esc</td>
      <td>隐藏当前窗口，焦点到编辑窗口</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + Shift + F4</td>
      <td>关闭主动运行的选项卡</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + G</td>
      <td>查看当前行号、字符号</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + E</td>
      <td>最近访问的文件</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl+Alt+Left/Right</td>
      <td>后退、前进</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl+Shift+Backspace</td>
      <td>导航到最近编辑区域</td>
      <td> </td>
    </tr>
    <tr>
      <td>Alt + F1</td>
      <td>查找当前文件或标识</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl+B / Ctrl+Click</td>
      <td>跳转到声明</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + Alt + B</td>
      <td>跳转到实现</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + Shift + I</td>
      <td>查看快速定义</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + Shift + B</td>
      <td>跳转到类型声明</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + U</td>
      <td>跳转到父方法、父类</td>
      <td> </td>
    </tr>
    <tr>
      <td>Alt + Up/Down</td>
      <td>跳转到上一个、下一个方法</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + ]/[</td>
      <td>跳转到代码块结束、开始</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + F12</td>
      <td>弹出文件结构</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + H</td>
      <td>类型层次结构</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + Shift + H</td>
      <td>方法层次结构</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + Alt + H</td>
      <td>调用层次结构</td>
      <td> </td>
    </tr>
    <tr>
      <td>F2 / Shift + F2</td>
      <td>下一条、前一条高亮的错误</td>
      <td> </td>
    </tr>
    <tr>
      <td>F4 / Ctrl + Enter</td>
      <td>编辑资源、查看资源</td>
      <td> </td>
    </tr>
    <tr>
      <td>Alt + Home</td>
      <td>显示导航条F11书签开关</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl + Shift +F11</td>
      <td>书签助记开关</td>
      <td> </td>
    </tr>
    <tr>
      <td>Ctrl #[0-9]</td>
      <td>+</td>
      <td>跳转到标识的书签</td>
    </tr>
    <tr>
      <td>Shift +</td>
      <td>F11显示书签</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h2 id="搜索相关usage-search">搜索相关(Usage Search)</h2>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Alt + F7/Ctrl + F7</td>
      <td>文件中查询用法</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + F7</td>
      <td>文件中用法高亮显示</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + F7</td>
      <td>显示用法</td>
    </tr>
  </tbody>
</table>

<h2 id="重构refactoring">重构(Refactoring)</h2>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>F5</td>
      <td>复制</td>
    </tr>
    <tr>
      <td>F6</td>
      <td>剪切</td>
    </tr>
    <tr>
      <td>Alt + Delete</td>
      <td>安全删除</td>
    </tr>
    <tr>
      <td>Shift + F6</td>
      <td>方法或变量重命名</td>
    </tr>
    <tr>
      <td>Ctrl + F6</td>
      <td>更改签名</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + N</td>
      <td>内联</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + M</td>
      <td>提取方法</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + V</td>
      <td>提取属性</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + F</td>
      <td>提取字段</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + C</td>
      <td>提取常量</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + P</td>
      <td>提取参数</td>
    </tr>
  </tbody>
</table>

<h2 id="控制vcslocal-history">控制VCS/Local History</h2>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Ctrl + K</td>
      <td>提交项目</td>
    </tr>
    <tr>
      <td>Ctrl + T</td>
      <td>更新项目</td>
    </tr>
    <tr>
      <td>Alt + Shift + C</td>
      <td>查看最近的变化</td>
    </tr>
    <tr>
      <td>Alt + BackQuote(’)VCS</td>
      <td>快速弹出</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + J</td>
      <td>当前行使用模版</td>
    </tr>
  </tbody>
</table>

<h2 id="模版live-templates">模版(Live Templates)</h2>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Ctrl + Alt + J</td>
      <td>当前行使用模版</td>
    </tr>
    <tr>
      <td>Ctrl +Ｊ</td>
      <td>插入模版</td>
    </tr>
  </tbody>
</table>

<h2 id="基本general">基本(General)</h2>

<table>
  <thead>
    <tr>
      <th>快捷键</th>
      <th>功能</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Alt + #[0-9]</td>
      <td>打开相应编号的工具窗口</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + Y</td>
      <td>同步</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + F12</td>
      <td>最大化编辑开关</td>
    </tr>
    <tr>
      <td>Alt + Shift + F</td>
      <td>添加到最喜欢</td>
    </tr>
    <tr>
      <td>Alt + Shift + I</td>
      <td>根据配置检查当前文件</td>
    </tr>
    <tr>
      <td>Ctrl + BackQuote(’)</td>
      <td>快速切换当前计划</td>
    </tr>
    <tr>
      <td>Ctrl + Alt + S</td>
      <td>打开设置页</td>
    </tr>
    <tr>
      <td>Ctrl + Shift + A</td>
      <td>查找编辑器里所有的动作</td>
    </tr>
    <tr>
      <td>Ctrl + Tab</td>
      <td>在窗口间进行切换</td>
    </tr>
  </tbody>
</table>

<h1 id="使用小tips">使用小tips</h1>

<h4 id="1pycharm可以在一个窗口中使用多个项目">1：PyCharm可以在一个窗口中使用多个项目。</h4>

<p>要在已打开的窗口中打开项目，请在“文件”菜单上选择“打开”，然后在“打开项目”对话框中选择“在当前窗口中打开”选项，然后选中“添加到当前打开的项目”复选框。<br />
步骤：File–&gt;open–&gt;选择要打开的项目–&gt;按图片选择</p>

<h4 id="2快速打开编辑器中的任何类ctrl--nctrl--shift--n">2：快速打开编辑器中的任何类，Ctrl + N、Ctrl + Shift + N</h4>

<table>
  <tbody>
    <tr>
      <td>请按Ctrl + N（Navigate</td>
      <td>Class）并开始输入类的名称。 从显示的下拉列表中选择类。</td>
    </tr>
    <tr>
      <td>您可以使用Ctrl + Shift + N（导航</td>
      <td>文件）以类似的方式打开项目中的任何文件</td>
    </tr>
  </tbody>
</table>

<h4 id="3-代码完成功能可以让您快速完成代码中的各种语句">3 代码完成功能可以让您快速完成代码中的各种语句。</h4>

<p>例如，开始输入一个类名，然后按Ctrl +空格来完成它。 当有多个选项可用时，它们将显示在查找列表中。</p>

<h4 id="4通过按ctrl-空格两次来调用代码完成特性的一个特殊变体可以让您完成任何类的名称而不管它是否被导入到当前文件中-如果类尚未导入则会自动生成导入语句">4：通过按Ctrl +空格两次来调用代码完成特性的一个特殊变体，可以让您完成任何类的名称，而不管它是否被导入到当前文件中。 如果类尚未导入，则会自动生成导入语句。</h4>

<h4 id="5您可以快速找到所有在整个项目中使用特定类方法或变量的地方方法是将脱字符按照符号名称或代码中的用法进行定位然后按alt--f7在弹出式菜单中查找用法">5：您可以快速找到所有在整个项目中使用特定类，方法或变量的地方，方法是将脱字符按照符号名称或代码中的用法进行定位，然后按Alt + F7（在弹出式菜单中查找用法）。</h4>

<h4 id="6要快速查看插入符号处的文档请按ctrl--q查看快速文档">6：要快速查看插入符号处的文档，请按Ctrl + Q（查看|快速文档）。</h4>

<h4 id="7要导航到代码中某处使用的类方法或变量的声明请将插入符定位到使用位置然后按ctrl--b-您也可以点击鼠标的用法按下ctrl键跳到声明">7：要导航到代码中某处使用的类，方法或变量的声明，请将插入符定位到使用位置，然后按Ctrl + B。 您也可以点击鼠标的用法按下Ctrl键跳到声明。</h4>

<h4 id="8您可以使用ctrl--f12导航文件结构在当前编辑的文件中快速导航">8：您可以使用Ctrl + F12（导航|文件结构）在当前编辑的文件中快速导航。</h4>

<p>它显示了当前班级的成员名单。 选择要导航到的元素，然后按Enter键或F4键。<br />
要轻松找到列表中的项目，只需输入名称即可。</p>

<h4 id="9您可以轻松地重命名您的本地变量并自动更正所有使用它们的地方">9：您可以轻松地重命名您的本地变量，并自动更正所有使用它们的地方。</h4>

<table>
  <tbody>
    <tr>
      <td>要尝试它，将插入符号放在要重命名的变量中，然后按Shift + F6（Refactor</td>
      <td>Rename）。 在出现的弹出窗口中输入新名称，或选择一个建议名称，然后按Enter键。</td>
    </tr>
  </tbody>
</table>

<h4 id="10使用代码完成时您可以使用tab键在弹出列表中接受当前突出显示的选择">10：使用代码完成时，您可以使用Tab键在弹出列表中接受当前突出显示的选择。</h4>

<p>与使用Enter键接受不同，选定的名称将覆盖脱字符右侧的其余名称。 这对于用另一个替换一个方法或变量名是特别有用的。</p>

<h4 id="11您是否知道您可以在pycharm的编辑器和工具窗口中关闭选项卡而无需使用上下文菜单命令-用鼠标指向要关闭的选项卡然后单击鼠标中键或使用shift-单击组合就足够了">11：您是否知道，您可以在PyCharm的编辑器和工具窗口中关闭选项卡，而无需使用上下文菜单命令？ 用鼠标指向要关闭的选项卡，然后单击鼠标中键或使用Shift +单击组合就足够了。</h4>

<h4 id="12要在任何视图项目视图结构视图或其他中快速选择当前编辑的元素类文件方法或字段请按alt--f1">12：要在任何视图（项目视图，结构视图或其他）中快速选择当前编辑的元素（类，文件，方法或字段），请按Alt + F1。</h4>

<h4 id="13速度搜索在所有树视图中都可用只需开始输入然后快速找到必要的项目">13：速度搜索在所有树视图中都可用：只需开始输入，然后快速找到必要的项目。</h4>

<h4 id="14任何工具窗口中的esc键将焦点移动到编辑器">14：任何工具窗口中的Esc键将焦点移动到编辑器。</h4>

<p>Shift + Esc将焦点移动到编辑器，并隐藏当前（或最后一个活动）工具窗口。</p>

<p>F12键将焦点从编辑器移到最后一个聚焦的工具窗口。</p>

<h4 id="15编辑器中的ctrl--w扩展选择选择插入符号处的单词然后选择源代码的扩展区域-例如可以选择一个方法名称然后是调用这个方法的表达式然后是整个语句然后是包含的块等还可以选择插入的字和源代码的扩展区域-点击编辑器中的目标区域">15：编辑器中的Ctrl + W（扩展选择）选择插入符号处的单词，然后选择源代码的扩展区域。 例如，可以选择一个方法名称，然后是调用这个方法的表达式，然后是整个语句，然后是包含的块等。还可以选择插入的字和源代码的扩展区域， 点击编辑器中的目标区域。</h4>

<h4 id="16extract-variable重构可以帮助您简化代码中的复杂语句-例如在下面的代码片段中可以在代码中选择一个表达式然后按ctrl--alt--vrefactor--extract--variable">16：Extract Variable重构可以帮助您简化代码中的复杂语句。 例如，在下面的代码片段中，可以在代码中选择一个表达式，然后按Ctrl + Alt + V（Refactor | Extract | Variable）。</h4>

<h4 id="17编辑器中的ctrl--d复制所选块或当前行而不选择块">17：编辑器中的Ctrl + D复制所选块或当前行，而不选择块。</h4>

<h4 id="18代码-移动语句向上向下操作对于重新组织文件中的代码行非常有用例如使变量声明更接近变量用法">18：代码| 移动语句向上/向下操作对于重新组织文件中的代码行非常有用，例如，使变量声明更接近变量用法。</h4>

<p>例如，选择一个代码片段，然后按Ctrl + Shift +向上箭头或Ctrl + Shift +向下箭头。</p>

<h4 id="19ctrl--shift--j快捷键将两行合并为一行并删除不必要的空格以符合您的代码样式">19：Ctrl + Shift + J快捷键将两行合并为一行，并删除不必要的空格以符合您的代码样式。</h4>

<h4 id="20如果光标位于方法调用的括号之间按下ctrl--p将弹出一个有效参数列表">20：如果光标位于方法调用的括号之间，按下Ctrl + P将弹出一个有效参数列表。</h4>

<h4 id="21ctrl--shift--backspace导航上一个编辑位置将您带回到您在代码中进行更改的最后一个地方">21：Ctrl + Shift + Backspace（导航|上一个编辑位置）将您带回到您在代码中进行更改的最后一个地方。</h4>

<p>按Ctrl + Shift + Backspace几次，可以更深入地了解您的更改历史记录。</p>

<h4 id="22使用ctrl--shift--f7edit--find-突出显示文件中的用法快速突出显示当前文件中某些变量的用法">22：使用Ctrl + Shift + F7（Edit | Find |突出显示文件中的用法）快速突出显示当前文件中某些变量的用法。</h4>

<p>使用F3和Shift + F3键浏览突出显示的用法。<br />
按Esc删除突出显示。</p>

<h4 id="23要查看您的本地文件更改历史记录请调用本地历史记录-显示上下文菜单中的历史记录-local-history--show-history-您可以浏览不同的文件版本查看差异并回滚到任何以前的版本">23：要查看您的本地文件更改历史记录，请调用本地历史记录| 显示上下文菜单中的历史记录（ Local History | Show History）。 您可以浏览不同的文件版本，查看差异并回滚到任何以前的版本。</h4>

<p>使用相同的上下文菜单项查看目录上的更改历史记录。 你永远不会失去这个功能的任何代码！</p>

<h4 id="24ctrl--e查看最近的文件带来最近访问的文件的弹出列表-选择所需的文件然后按enter打开它">24：Ctrl + E（查看|最近的文件）带来最近访问的文件的弹出列表。 选择所需的文件，然后按Enter打开它。</h4>

<h4 id="25要在编辑器中的方法之间显示分隔线请打开编辑器设置然后选中外观页面中的显示方法分隔符复选框">25：要在编辑器中的方法之间显示分隔线，请打开编辑器设置，然后选中“外观”页面中的“显示方法分隔符”复选框。</h4>

<h4 id="26当使用基本代码完成ctrl-空格时输入标识符中任何地方存在的任何字符提示符">26：当使用基本代码完成（Ctrl +空格）时，输入标识符中任何地方存在的任何字符。–提示符</h4>

<h4 id="27使用alt-向上箭头和alt-向下箭头键在编辑器中快速移动方法">27：使用Alt +向上箭头和Alt +向下箭头键在编辑器中快速移动方法。</h4>

<h4 id="28使用ctrl--shift--v快捷键选择并将最近的剪贴板内容插入到文本中">28：使用Ctrl + Shift + V快捷键选择并将最近的剪贴板内容插入到文本中。</h4>

<h4 id="29您可以通过按ctrl--o代码覆盖方法轻松地覆盖基类的方法">29：您可以通过按Ctrl + O（代码|覆盖方法）轻松地覆盖基类的方法。</h4>

<h4 id="30为了帮助您了解主菜单中每个项目的用途将鼠标指针放在该项目上时其简短说明会显示在应用程序框架底部的状态栏中">30：为了帮助您了解主菜单中每个项目的用途，将鼠标指针放在该项目上时，其简短说明会显示在应用程序框架底部的状态栏中。</h4>

<h4 id="31要快速打开编辑器中的任何特定方法或字段请按ctrl--alt--shift--n导航符号并开始输入其名称">31：要快速打开编辑器中的任何特定方法或字段，请按Ctrl + Alt + Shift + N（导航|符号）并开始输入其名称。</h4>

<p>从显示的下拉列表中选择符号。</p>

<h4 id="32使用alt--shift--c快速查看您最近对项目的更改">32：使用Alt + Shift + C快速查看您最近对项目的更改。</h4>

<h4 id="33您可以通过拖动鼠标指针轻松进行列选择同时保持按下alt键-alt键同时选择多行">33：您可以通过拖动鼠标指针轻松进行列选择，同时保持按下Alt键。 alt键同时选择多行</h4>

<h4 id="34要快速查找菜单命令或工具栏操作您不需要浏览菜单-只需按ctrl--shift--a在主菜单上的帮助查找操作并开始输入操作的名称-从建议列表中选择所需的操作">34：要快速查找菜单命令或工具栏操作，您不需要浏览菜单。 只需按Ctrl + Shift + A（在主菜单上的帮助|查找操作）并开始输入操作的名称。 从建议列表中选择所需的操作。</h4>

<h4 id="35代码排版自动pep8">35：代码排版，自动PEP8</h4>

<p>pep8 是Python 语言的一个代码编写规范。如若你是新手，目前只想快速掌握基础，而不想过多去注重代码的的编写风格（虽然这很重要），那你可以尝试一下这个工具 -autopep8。<br />
可参考博客 <a href="https://www.cnblogs.com/xxtalhr/p/10645992.html">https://www.cnblogs.com/xxtalhr/p/10645992.html</a></p>

<h4 id="36误删文件一秒找回">36：误删文件，一秒找回</h4>

<p>可以在你的项目目录里，点击右键，有个 Local History 的选项，再点击子选项 Show History，你可以看到这里有个记录板。如果你想恢复删除的文件，就在删除的记录项点击右键，选择 Revert 即可恢复。</p>

<h4 id="37代码模板效率编码">37：代码模板，效率编码</h4>

<p>Pycharm 提供的这个代码模板，可以说是相当实用的一个功能了。它可以在你新建一个文件时，按照你预设的模板给你生成一段内容，比如解释器路径，编码方法，作者详细信息等<br />
<a href="https://img2020.cnblogs.com/blog/1987782/202110/1987782-20211018092402292-1592415125.png"><img src="https://img2020.cnblogs.com/blog/1987782/202110/1987782-20211018092402292-1592415125.png" alt="" /></a><br />
除了新建文件时可以初始化文件，在开发编写代码时，也同样使用 Pycharm 中自带的实用的代码模板，提高你的编码效率。当你在键盘中敲入 Ctrl + J 时，就可以调出一个面板，从下图可以看出里面有许多预设的模板。<br />
<a href="https://img2020.cnblogs.com/blog/1987782/202110/1987782-20211018092502705-1053875581.png"><img src="https://img2020.cnblogs.com/blog/1987782/202110/1987782-20211018092502705-1053875581.png" alt="" /></a></p>

<h4 id="38关闭烦人的灯泡提示">38：关闭烦人的灯泡提示</h4>

<p>先来说下这个灯泡提示是什么，有什么用？</p>

<p>当我们在代码里面有语法错误，或者代码编写不符合 pep8 代码规范时，鼠标选择有问题的代码，就会自动弹出小灯泡，这个灯泡是有颜色之分的，如果是红灯泡，一般都是语法问题，如果不处理会影响代码运行。而如果是黄灯泡，就只是一个提示，提示你代码不规范等，并不会影响程序的运行。</p>

<p>虽然这个灯泡，是出于善意之举，但我认为它确实有点多余（可能是我个人没有使用它的习惯），要是语法错误会有红色波浪线提示。你可能会说灯泡不仅起到提示的作用，它还可以自动纠正代码，我个人感觉并没有人工校正来得效率，来得精准。</p>

<p>基于有时还会像知乎上这个朋友说的这样，会挡住我们的代码，会经常误点，这确实也是一个烦恼。</p>

<p>Pycharm （2018版本）里是有开关按钮的，将下图中的这个选项（Show intention bulb）取消勾选，就可以关闭这个功能。<br />
<a href="https://img2020.cnblogs.com/blog/1987782/202110/1987782-20211018092529573-356366078.png"><img src="https://img2020.cnblogs.com/blog/1987782/202110/1987782-20211018092529573-356366078.png" alt="" /></a></p>

<h4 id="39关闭碍眼的波浪线">39：关闭碍眼的波浪线</h4>

<p>Pycharm 本身会实时地对变量名进行检查，如果变量名不是一个已存在的英文单词，就会出现一条波浪线，当一个变量里有多个单词时，Python 推荐的写法是用下划线来分隔（其他语言可能会习惯使用驼峰式命名法 ，但 Python 是使用下划线），那么如何关闭这个非语法级别的波浪线呢？很简单，它的开关就在你的右下角那个像 人头像 一样的按钮<br />
<a href="https://img2020.cnblogs.com/blog/1987782/202110/1987782-20211018092541375-1264761172.png"><img src="https://img2020.cnblogs.com/blog/1987782/202110/1987782-20211018092541375-1264761172.png" alt="" /></a></p>

<p>注：文章内容来源于网络，若有侵权或不当之处还请谅解</p>

<h1 id="转载信息">转载信息</h1>

<ul>
  <li><strong>本文作者：</strong> <a href="https://www.cnblogs.com/echohye">北风几吹夏</a></li>
  <li><strong>本文链接：</strong> <a href="https://www.cnblogs.com/echohye/p/15419237.html">https://www.cnblogs.com/echohye/p/15419237.html</a></li>
</ul>

<p>本文转自 <a href="https://www.cnblogs.com/echohye/p/15419237.html">https://www.cnblogs.com/echohye/p/15419237.html</a>，如有侵权，请联系删除。</p>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="PyCharm" /><category term="PyCharm" /><summary type="html"><![CDATA[PyCharm的快捷键记录，转自 https://www.cnblogs.com/echohye/p/15419237.html，如有侵权，请联系删除。]]></summary></entry><entry><title type="html">windows共享文件夹的连接不上的解决方案</title><link href="http://localhost:4000/windows%E9%85%8D%E7%BD%AE/2023/07/21/windows%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/" rel="alternate" type="text/html" title="windows共享文件夹的连接不上的解决方案" /><published>2023-07-21T13:38:05+08:00</published><updated>2023-07-21T13:38:05+08:00</updated><id>http://localhost:4000/windows%E9%85%8D%E7%BD%AE/2023/07/21/windows%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88</id><content type="html" xml:base="http://localhost:4000/windows%E9%85%8D%E7%BD%AE/2023/07/21/windows%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"><![CDATA[<p>手头有几台机器，想要构建一下网络共享，把几台设备的文件夹都互相映射一下，方便访问。但是在<strong>网络</strong>里面通过ip访问局域网设备时发现出现了<strong>无法访问</strong>的问题，在终端里<code class="language-plaintext highlighter-rouge">ping ip</code>也行不通，搜集资料自己试了之后总结了一下。</p>

<h1 id="共享设置">共享设置</h1>

<h2 id="属性设置">属性设置</h2>

<p>磁盘文件夹当然要设置共享，这个简单，邮件目标磁盘或者文件夹，在<strong>共享</strong>标签页里面打开高级共享进行相应设置就行了
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211313254.png" alt="image.png" /></p>

<p><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211313916.png" alt="image.png" /></p>

<p><strong>网络和共享中心</strong>里面也可以进行相应设置，主要是出于网络和安全性考虑
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211315173.png" alt="image.png" /></p>

<h2 id="检验共享">检验共享</h2>

<p>在资源管理器里面输入<code class="language-plaintext highlighter-rouge">\\localhost</code>访问，可以看到本机共享的文件夹
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211336878.png" alt="image.png" /></p>

<h1 id="防火墙设置">防火墙设置</h1>

<p>文件夹共享设置好了以后，如果不能正常<code class="language-plaintext highlighter-rouge">ping</code>或者在资源管理器访问ip，先关闭防火墙看看有没有问题，如果关闭防火墙正常表现，那就修改一下防火墙规则</p>

<ol>
  <li>在<strong>windows安全中心</strong>里打开<strong>高级设置</strong><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211319812.png" alt="image.png" /></li>
  <li>选择<strong>入站规则</strong>按组筛选<strong>文件和打印机共享</strong><img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211322450.png" alt="image.png" /></li>
</ol>

<p>在这些规则里面，有两条和我们的需求相关</p>
<ul>
  <li><strong>文件和打印机共享（回显请求 - ICMPv4）</strong> ：“回显请求”消息是作为 Ping 请求发送到其他节点的；启用这条规则启用ping回显。</li>
  <li><strong>文件和打印机共享（SMB-In）</strong>：用于文件和打印机共享的入站规则，以允许通过命名管道传输和接收服务器消息块；启用这条规则启用smb文件服务。</li>
</ul>

<p>启用后，如果还是不行，那就设置一下规则的<strong>作用域</strong>，双击规则打开子窗口，切换到<strong>作用域</strong>标签页，设置<strong>远程IP地址</strong>，添加自己的目标设备ip
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307211334692.png" alt="image.png" />
我这里因为用的组网工具，就填了虚拟局域网里分配的ip，我也不知道为什么不是本地IP
到这里就应该就可以正常远程访问文件夹和ping通机器了</p>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="windows配置" /><category term="windows" /><summary type="html"><![CDATA[手头有几台机器，想要构建一下网络共享，把几台设备的文件夹都互相映射一下，方便访问。但是在网络里面通过ip访问局域网设备时发现出现了无法访问的问题，在终端里ping ip也行不通，搜集资料自己试了之后总结了一下。]]></summary></entry><entry><title type="html">VS中配置Qt并设置应用程序图标</title><link href="http://localhost:4000/qt%20vs/2023/07/19/VS-Qt%E9%85%8D%E7%BD%AE/" rel="alternate" type="text/html" title="VS中配置Qt并设置应用程序图标" /><published>2023-07-19T20:53:47+08:00</published><updated>2023-07-19T20:53:47+08:00</updated><id>http://localhost:4000/qt%20vs/2023/07/19/VS-Qt%E9%85%8D%E7%BD%AE</id><content type="html" xml:base="http://localhost:4000/qt%20vs/2023/07/19/VS-Qt%E9%85%8D%E7%BD%AE/"><![CDATA[<p>在visual studio里配置qt，以及程序的图标设置</p>

<h2 id="requirements">Requirements</h2>

<ul>
  <li>Qt5</li>
</ul>

<h2 id="ide">IDE</h2>

<ul>
  <li>visual studio</li>
</ul>

<h2 id="编译环境配置">编译环境配置</h2>

<h3 id="下载安装visual-studio">下载安装visual studio</h3>

<h3 id="安装qt5">安装Qt5</h3>

<ul>
  <li>在<a href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a>下载合适版本的Qt安装文件，以5.14.2为例（<strong>qt-opensource-windows-x86-5.14.2.exe</strong>）</li>
  <li>下载完成后，运行可执行文件进行安装，完成注册账号和勾选协议之后，在<strong>Select Components</strong>步骤中选择编译组件，此时选择的编译组件应与本地安装visual
studio中编译模块版本一致。（可参考<a href="https://blog.csdn.net/weixin_43961107/article/details/109017275">如何查看Visual Studio版本、与MSVC版本号的对应关系</a>或直接使用vs安装软件查看已安装组件）</li>
</ul>

<h3 id="在visual-studio中安装qt插件qt-vs-tools">在visual studio中安装Qt插件<code class="language-plaintext highlighter-rouge">Qt VS Tools</code></h3>

<ul>
  <li>在<a href="https://download.qt.io/archive/vsaddin/">https://download.qt.io/archive/vsaddin/</a>中安装指定版本的Qt插件（例如：qt-vsaddin-msvc2022-2.8.1-rev.06.vsix），其中MSVC版本需要与visual studio、Qt安装时选择的编译模块版本一致（参考<a href="https://zhuanlan.zhihu.com/p/512594852">Visual Studio+Qt软件安装及环境配置过程和无法设置Qt路径的解决方案</a>）</li>
  <li>关闭visual studio后双击安装文件，按步骤安装即可</li>
  <li>若在visual studio的菜单栏的<strong>扩展</strong>中可以看到<strong>Qt VS Tools</strong>，则说明安装成功</li>
  <li><strong>若visual studio不是最新版本，安装完插件后可能会提示有可更新版本，无视即可</strong></li>
</ul>

<h3 id="配置qt-vs-tools">配置Qt VS Tools</h3>

<ul>
  <li>打开visual studio，在<strong>扩展</strong>中选择<strong>Qt VS Tools</strong>的下级菜单中点击<strong>Qt Options</strong>后进入<strong>Qt Version</strong>或直接点击下级菜单中的<strong>Qt Version</strong>，点击<strong>Add</strong>按钮或<strong>加号</strong>，选择编译器路径（例：<em>“C:\Qt\Qt5.14.2\5.14.2\msvc2017\_64\bin\qmake.exe”</em>）</li>
</ul>

<h3 id="其他配置">其他配置</h3>

<p>由于本地使用visual studio和Qt版本可能不一致，在打开解决方案后有可能无法正常编译，需要在项目属性中进行修改</p>

<ul>
  <li>菜单栏中选择：项目-&gt;属性</li>
  <li>在属性页窗口中进入<strong>Qt Project Settings</strong>，在<strong>Qt Installation</strong>中下拉选择之前配置好的Qt VS Tools中的编译器</li>
  <li>若有必要，在属性页窗口中进入<strong>常规</strong>，调整<strong>平台工具集</strong></li>
</ul>

<h1 id="图标设置">图标设置</h1>

<h2 id="图标制作">图标制作</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">from</span> <span class="n">PIL</span> <span class="kn">import</span> <span class="n">Image</span>

<span class="n">im</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">"</span><span class="s">post-6006-blazar-announce-05-780x780.webp</span><span class="sh">"</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">IMREAD_UNCHANGED</span><span class="p">)</span>
<span class="n">im</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">im</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2BGRA</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2BGRA</span><span class="p">)</span>
<span class="c1"># 126, 255, 129
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">im</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">im</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
        <span class="nf">if </span><span class="p">((</span><span class="n">im</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span><span class="o">&gt;</span><span class="mi">250</span> <span class="ow">and</span> <span class="p">(</span><span class="n">im</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span><span class="o">&gt;</span><span class="mi">250</span> <span class="ow">and</span> <span class="p">(</span><span class="n">im</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span><span class="o">&gt;</span><span class="mi">250</span><span class="p">):</span>
            <span class="n">im</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>

<span class="c1"># 将BGR图像转换为RGBA图像
</span><span class="n">image_rgba</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">im</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGRA2RGBA</span><span class="p">)</span>
<span class="c1"># 创建Pillow图像对象
</span><span class="n">ico_image</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nf">fromarray</span><span class="p">(</span><span class="n">image_rgba</span><span class="p">)</span>
<span class="c1"># 保存为ico格式的图标
</span><span class="n">ico_image</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="sh">'</span><span class="s">im.ico</span><span class="sh">'</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="sh">"</span><span class="s">ICO</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="应用程序图标设置">应用程序图标设置</h2>

<ol>
  <li>提前准备好图标资源（.ico文件），可以在ico制作网站生成（比如说<a href="https://www.logosc.cn/logo/favicon">Favicon.ico图标生成器</a>）</li>
  <li>在VS资源视图中选中项目右键，添加资源 <img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307192103632.png" alt="image.png" /></li>
  <li>选择icon，导入提前准备好的.ico文件 <img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307192103351.png" alt="image.png" /></li>
  <li>默认资源ID为IDI_ICON1</li>
  <li>重新编译</li>
</ol>

<h2 id="任务栏图标设置">任务栏图标设置</h2>

<ol>
  <li>提前准备好图标资源（.ico文件），可以在ico制作网站生成</li>
  <li>
    <p>将准备好的.ico文件放到项目文件夹中</p>
  </li>
  <li>
    <p>将图标资源添加到.qrc文件中</p>
  </li>
  <li>
    <p>选中解决方案中的.qrc文件，双击打开</p>
  </li>
  <li>
    <p>Add-&gt;Add Files，选择.ico文件<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307192111317.png" alt="image.png" /></p>
  </li>
  <li>Resource URL中是资源的路径</li>
  <li>主程序中添加代码
    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">setWindowIcon</span><span class="p">(</span><span class="n">QIcon</span><span class="p">(</span><span class="s">":/Test/Resources/icon1.ico"</span><span class="p">));</span><span class="c1">//设置状态栏图标</span>
</code></pre></div>    </div>
  </li>
</ol>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="Qt VS" /><category term="visual studio" /><category term="Qt" /><summary type="html"><![CDATA[在visual studio里配置qt，以及程序的图标设置]]></summary></entry><entry><title type="html">基于Qt的桌面镜面翻转程序</title><link href="http://localhost:4000/qt/2023/07/17/%E5%9F%BA%E4%BA%8EQt%E7%9A%84%E6%A1%8C%E9%9D%A2%E9%95%9C%E9%9D%A2%E7%BF%BB%E8%BD%AC%E7%A8%8B%E5%BA%8F/" rel="alternate" type="text/html" title="基于Qt的桌面镜面翻转程序" /><published>2023-07-17T09:08:23+08:00</published><updated>2023-07-17T09:08:23+08:00</updated><id>http://localhost:4000/qt/2023/07/17/%E5%9F%BA%E4%BA%8EQt%E7%9A%84%E6%A1%8C%E9%9D%A2%E9%95%9C%E9%9D%A2%E7%BF%BB%E8%BD%AC%E7%A8%8B%E5%BA%8F</id><content type="html" xml:base="http://localhost:4000/qt/2023/07/17/%E5%9F%BA%E4%BA%8EQt%E7%9A%84%E6%A1%8C%E9%9D%A2%E9%95%9C%E9%9D%A2%E7%BF%BB%E8%BD%AC%E7%A8%8B%E5%BA%8F/"><![CDATA[<p>windows桌面可以横向、纵向翻转显示桌面，但是不能对屏幕进行镜像翻转，当然基本上也不会有人有这种奇怪的需求。<a href="https://www.realtimesoft.com/ultramon/">UltraMon</a>可以实现这个功能，在扩展屏上镜像覆盖主屏幕，此外，这个软件本身也有很多很强大的功能。但是在主屏幕缩放比例超过100%时会无法正确显示，每次使用的时候都重新设置一下分辨率和缩放比例显得还是有些奇怪了。
于是自己写了一个基于Qt的镜像翻转桌面的小程序，基本的原理就是捕获主屏幕的画面，将图像镜像翻转后显示在窗口内。
<strong>如果想直接下载使用可以参考<a href="#github">github页面</a>的<a href="#download">下载</a>链接。</strong></p>

<p>看看效果先：
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307170907586.png" alt="扩展模式的双屏幕示例，右下为主屏幕，左上为扩展屏幕" /></p>

<h1 id="捕获窗口">捕获窗口</h1>
<p><code class="language-plaintext highlighter-rouge">QPixmap QScreen::grabWindow(WId window = 0, int x = 0, int y = 0, int width = -1, int height = -1)</code>可以实现指定句柄的窗口捕获，但是美中不足的是没有办法捕获到鼠标。
函数<code class="language-plaintext highlighter-rouge">grW(HWND winId, int x, int y, int w, int h)</code><a href="#grW">参考附录1</a>，实现了捕获桌面的同时也捕获鼠标，在使用时需要在Qt的设置中添加<code class="language-plaintext highlighter-rouge">winextras</code>组件。
<code class="language-plaintext highlighter-rouge">winId</code>是窗口句柄，获取主桌面的句柄可以借助以下语句实现：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">screen</span> <span class="o">=</span> <span class="n">QGuiApplication</span><span class="o">::</span><span class="n">primaryScreen</span><span class="p">();</span>
</code></pre></div></div>
<p>获取窗口后，将图像进行镜面翻转后再嵌入窗口中，这个功能可能借助Qt自带的<code class="language-plaintext highlighter-rouge">QImage QImage::mirrored(bool horizontal = false, bool vertical = true)</code>函数实现，两个参数分别为水平方向和垂直方向的翻转与否。</p>
<h1 id="定时触发">定时触发</h1>
<p>搞定了桌面和鼠标捕获，其实基本上就完成了主要工作，接下来只要设置一个定时器实时触发桌面捕获和显示的槽函数就可以了。</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="n">connect</span><span class="p">(</span><span class="n">timer</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">timeout</span><span class="p">()),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">timeoutSlot</span><span class="p">()));</span>
	<span class="n">timer</span><span class="o">-&gt;</span><span class="n">start</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</code></pre></div></div>
<p>定时器的触发间隔看需求了，虽然代码里设置了2毫秒，实际上也达不到这么快的速度，考虑到只在本地执行，也没有加上缓存区存储图像。</p>
<h1 id="全屏切换">全屏切换</h1>
<p>毕竟是用窗口覆盖了桌面，在显示的时候还是全屏遮盖掉其他应用和任务栏比较好，重构一下鼠标双击事件：</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="n">screenRelayer</span><span class="o">::</span><span class="n">mouseDoubleClickEvent</span><span class="p">(</span><span class="n">QMouseEvent</span><span class="o">*</span> <span class="n">mouseEvent</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">//showFlag为标志位</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">showFlag</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">showFullScreen</span><span class="p">();</span>
		<span class="n">showFlag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>
		<span class="k">this</span><span class="o">-&gt;</span><span class="n">showNormal</span><span class="p">();</span>
		<span class="n">showFlag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>这样就可以在窗口内通过双击鼠标切换全屏和窗口了。</p>

<h1 id="附录">附录</h1>
<ol>
  <li>
    <p><span id="grW">窗口捕获函数实现<a href="#refer-anchor-1"><sup>1</sup></a></span></p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">QPixmap</span> <span class="n">screenRelayer</span><span class="o">::</span><span class="n">grW</span><span class="p">(</span><span class="n">HWND</span> <span class="n">winId</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="kt">int</span> <span class="n">h</span><span class="p">)</span>
 <span class="p">{</span>

     <span class="n">RECT</span> <span class="n">r</span><span class="p">;</span>
     <span class="n">GetClientRect</span><span class="p">(</span><span class="n">winId</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">r</span><span class="p">);</span>

     <span class="k">if</span> <span class="p">(</span><span class="n">w</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">w</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">right</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">left</span><span class="p">;</span>
     <span class="k">if</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">h</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">bottom</span> <span class="o">-</span> <span class="n">r</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>

     <span class="n">HDC</span> <span class="n">display_dc</span> <span class="o">=</span> <span class="n">GetDC</span><span class="p">(</span><span class="n">winId</span><span class="p">);</span>
     <span class="n">HDC</span> <span class="n">bitmap_dc</span> <span class="o">=</span> <span class="n">CreateCompatibleDC</span><span class="p">(</span><span class="n">display_dc</span><span class="p">);</span>
     <span class="n">HBITMAP</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">CreateCompatibleBitmap</span><span class="p">(</span><span class="n">display_dc</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">);</span>
     <span class="n">HGDIOBJ</span> <span class="n">null_bitmap</span> <span class="o">=</span> <span class="n">SelectObject</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">,</span> <span class="n">bitmap</span><span class="p">);</span>

     <span class="n">BitBlt</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">display_dc</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">SRCCOPY</span> <span class="o">|</span> <span class="n">CAPTUREBLT</span><span class="p">);</span>

     <span class="n">CURSORINFO</span> <span class="n">ci</span><span class="p">;</span>
     <span class="n">ci</span><span class="p">.</span><span class="n">cbSize</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">CURSORINFO</span><span class="p">);</span>
     <span class="n">GetCursorInfo</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ci</span><span class="p">);</span>
     <span class="k">if</span> <span class="p">((</span><span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">w</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="n">h</span><span class="p">)))</span>
         <span class="n">DrawIcon</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">,</span> <span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">x</span><span class="p">,</span> <span class="n">ci</span><span class="p">.</span><span class="n">ptScreenPos</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">y</span><span class="p">,</span> <span class="n">ci</span><span class="p">.</span><span class="n">hCursor</span><span class="p">);</span>

     <span class="c1">// clean up all but bitmap</span>
     <span class="n">ReleaseDC</span><span class="p">(</span><span class="n">winId</span><span class="p">,</span> <span class="n">display_dc</span><span class="p">);</span>
     <span class="n">SelectObject</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">,</span> <span class="n">null_bitmap</span><span class="p">);</span>
     <span class="n">DeleteDC</span><span class="p">(</span><span class="n">bitmap_dc</span><span class="p">);</span>

     <span class="n">QPixmap</span> <span class="n">pixmap</span> <span class="o">=</span> <span class="n">QtWin</span><span class="o">::</span><span class="n">fromHBITMAP</span><span class="p">(</span><span class="n">bitmap</span><span class="p">);</span>

     <span class="n">DeleteObject</span><span class="p">(</span><span class="n">bitmap</span><span class="p">);</span>

     <span class="k">return</span> <span class="n">pixmap</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>链接：
 <span id="github"><a href="https://github.com/Braised-Lamb/screenRelayer">https://github.com/Braised-Lamb/screenRelayer</a></span>
 <span id="download"><a href="https://github.com/Braised-Lamb/screenRelayer/releases/download/v1.0/screenRelayer-v1.0.zip">软件下载</a></span></p>
    <h1 id="参考">参考</h1>
  </li>
</ol>
<div id="refer-anchor-1"></div>

<ul>
  <li>[1] <a href="https://blog.csdn.net/qq_28581781/article/details/99644729">windows 下使用Qt抓取桌面和鼠标</a></li>
</ul>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="Qt" /><category term="Qt" /><summary type="html"><![CDATA[windows桌面可以横向、纵向翻转显示桌面，但是不能对屏幕进行镜像翻转，当然基本上也不会有人有这种奇怪的需求。UltraMon可以实现这个功能，在扩展屏上镜像覆盖主屏幕，此外，这个软件本身也有很多很强大的功能。但是在主屏幕缩放比例超过100%时会无法正确显示，每次使用的时候都重新设置一下分辨率和缩放比例显得还是有些奇怪了。 于是自己写了一个基于Qt的镜像翻转桌面的小程序，基本的原理就是捕获主屏幕的画面，将图像镜像翻转后显示在窗口内。 如果想直接下载使用可以参考github页面的下载链接。]]></summary></entry><entry><title type="html">ubuntu服务器配置clash</title><link href="http://localhost:4000/ubuntu%E9%85%8D%E7%BD%AE/2023/07/14/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEclash/" rel="alternate" type="text/html" title="ubuntu服务器配置clash" /><published>2023-07-14T19:30:45+08:00</published><updated>2023-07-14T19:30:45+08:00</updated><id>http://localhost:4000/ubuntu%E9%85%8D%E7%BD%AE/2023/07/14/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEclash</id><content type="html" xml:base="http://localhost:4000/ubuntu%E9%85%8D%E7%BD%AE/2023/07/14/ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AEclash/"><![CDATA[<p>最近把实验室的服务器弄了一下，装了个clash，但是远程图形化桌面老是搞不定，查了一些资料实现了在web面板里调整设置</p>

<h1 id="安装clash">安装clash</h1>
<ul>
  <li>github仓库地址：<code class="language-plaintext highlighter-rouge">https://github.com/Dreamacro/clash/releases </code></li>
</ul>

<p>在合适位置新建文件夹<code class="language-plaintext highlighter-rouge">Clash</code>，使用命令行<code class="language-plaintext highlighter-rouge">mkdir</code>新建文件夹，本文使用目录为 <code class="language-plaintext highlighter-rouge">~/Clash</code>，在Clash文件夹里下载clash文件</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/Clash 
<span class="nb">cd</span> ~/Clash
wget <span class="nt">-O</span> https://github.com/Dreamacro/clash/releases/download/v1.17.0/clash-linux-386-v1.17.0.gz
</code></pre></div></div>
<p>解压文件，设置读写权限，重命名</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">gzip</span> <span class="nt">-d</span> clash-linux-386-v1.17.0.gz <span class="c">#解压 </span>
<span class="nb">mv </span>clash-linux-386-v1.17.0.gz clash <span class="c">#修改为clash</span>
<span class="nb">chmod</span> +x Clash/clash <span class="c">#添加执行权限</span>
</code></pre></div></div>

<h1 id="配置">配置</h1>

<h2 id="clash配置">clash配置</h2>

<p>执行命令运行clash</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./clash
</code></pre></div></div>
<p>初次运行会有提示下载初始配置文件在<code class="language-plaintext highlighter-rouge">~/.config/clash/</code>，包含<code class="language-plaintext highlighter-rouge">config.yaml</code>和<code class="language-plaintext highlighter-rouge">Country.mmdb</code>
提示如下：</p>
<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">INFO[0000] Can't find config, create a initial config file 
INFO[0000] Can't find MMDB, start download              
INFO[0002] Mixed(http+socks) proxy listening at: 127.0.0.1:7890 
</span></code></pre></div></div>
<p>要配置自己的配置文件，在<code class="language-plaintext highlighter-rouge">clash</code>文件夹里下载订阅的<code class="language-plaintext highlighter-rouge">config.yaml</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-O</span> &lt;clash订阅地址&gt;
</code></pre></div></div>

<h2 id="代理配置">代理配置</h2>

<p>在使用clash的时候，考虑到诸如git、conda、python等环境都有可能使用代理，直接进行全局代理的设置，由clash来决定代理规则
在<code class="language-plaintext highlighter-rouge">~/.bashrc</code>末尾添加语句</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># clash proxy</span>
<span class="nb">alias </span><span class="nv">setProxy</span><span class="o">=</span><span class="s1">'export http_proxy=http://127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890;export HTTP_PROXY=http://127.0.0.1:7890;export HTTPS_PROXY=http://127.0.0.1:7890'</span>
<span class="nb">alias </span><span class="nv">unsetProxy</span><span class="o">=</span><span class="s1">'unset http_proxy;unset https_proxy;unset HTTP_PROXY;unset HTTPS_PROXY'</span>
<span class="si">$(</span>setProxy<span class="si">)</span>
</code></pre></div></div>
<p>将<code class="language-plaintext highlighter-rouge">setProxy </code>注册为设置代理，<code class="language-plaintext highlighter-rouge">unsetProxy</code>为取消设置，可以直接在shell中运行
<code class="language-plaintext highlighter-rouge">$(setProxy)</code>表示在<code class="language-plaintext highlighter-rouge">.bashrc</code>文件里执行设置代理</p>

<p>使用<code class="language-plaintext highlighter-rouge">env | grep proxy</code>和<code class="language-plaintext highlighter-rouge">env | grep PROXY</code>验证设置情况</p>

<h1 id="可视化面板">可视化面板</h1>
<p>在<code class="language-plaintext highlighter-rouge">~/.config/clash/</code>文件夹里下载<code class="language-plaintext highlighter-rouge">gh-pages</code>仓库编译好的文件</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone <span class="nt">-b</span> gh-pages https://github.com/Dreamacro/clash-dashboard ui
</code></pre></div></div>
<p>同时在<code class="language-plaintext highlighter-rouge">config.yaml</code>里设置端口和密钥</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># A RESTful API for clash</span>
<span class="na">external-controller</span><span class="pi">:</span> <span class="s">&lt;host_ip&gt;:&lt;port&gt;</span>
<span class="na">external-ui</span><span class="pi">:</span> <span class="s">ui</span>

<span class="c1"># Secret for RESTful API (Optional)</span>
<span class="na">secret</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;secret&gt;"</span>
</code></pre></div></div>
<p>其中，<code class="language-plaintext highlighter-rouge">&lt;host_ip&gt;</code>修改为合适的ip，<code class="language-plaintext highlighter-rouge">&lt;port&gt;</code>设置为合适的端口，如果本地使用，用<code class="language-plaintext highlighter-rouge">127.0.0.1</code>，如果希望在局域网访问，就用服务器在局域网内的ip
在<code class="language-plaintext highlighter-rouge">http://yacd.haishan.me/</code>填写配置访问面板，URL使用<code class="language-plaintext highlighter-rouge">http://&lt;host_ip&gt;:&lt;port&gt;</code>
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307152011152.png" alt="image.png" /></p>

<p>连接成功后可以访问面板：
<img src="https://cdn.jsdelivr.net/gh/Braised-Lamb/picbed/202307152011163.png" alt="image.png" /></p>

<h1 id="启动方式一注册服务">启动方式一：注册服务</h1>

<p>完成以上工作后，已经实现了clash的安装和配置，美中不足的地方在于，这样在终端启动的方法，需要保持前台活跃，也就是要一直留着一个窗口给clash
可以将clash注册为服务，实现开机启动和后台运行，新建文件</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/systemd/system/clash.service
</code></pre></div></div>
<p>内容填充为：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit] 
Description=clash service 
After=network.target 

[Service] 
Type=simple 
User=root # 用户名
ExecStart=~/Clash/clash # clash文件路径 
Restart=on-failure # or always, on-abort, etc 

[Install] 
WantedBy=multi-user.target
</code></pre></div></div>
<p>设置开机自启</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>systemctl daemon-reload 
systemctl <span class="nb">enable </span>clash
</code></pre></div></div>

<p>之后也可以用以下语句启动clash</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service clash start
</code></pre></div></div>

<h1 id="启动方式二bashrc文件配置">启动方式二：.bashrc文件配置</h1>

<p>在<code class="language-plaintext highlighter-rouge">.bashrc</code>文件里添加以下语句</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">alias </span><span class="nv">clashOn</span><span class="o">=</span><span class="s1">'nohup ~/Clash/clash &gt; /dev/null 2&gt;&amp;1 &amp;'</span>
<span class="nb">alias </span><span class="nv">clashOff</span><span class="o">=</span><span class="s1">'kill $(pgrep -f clash)'</span>
<span class="si">$(</span>clashOn<span class="si">)</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">clashOn</code>实现后台启动clash
<code class="language-plaintext highlighter-rouge">clashOff</code>实现停止clash进程
可以通过<code class="language-plaintext highlighter-rouge">ps -ef | grep clash</code>来验证clash服务运行情况</p>

<h1 id="参考">参考</h1>
<p><a href="https://www.xxpyy.top/detailed?id=14">在 Linux 服务器上安装 Clash，以及开机自动启动</a></p>

<p><a href="https://www.duckflew.cn/archives/fu-wu-qi-shang-pei-zhi-c-l-a-s-h">服务器上配置clash - 真是古得</a></p>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="ubuntu配置" /><category term="ubuntu" /><category term="clash" /><summary type="html"><![CDATA[最近把实验室的服务器弄了一下，装了个clash，但是远程图形化桌面老是搞不定，查了一些资料实现了在web面板里调整设置]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2023/07/14/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2023-07-14T17:15:17+08:00</published><updated>2023-07-14T17:15:17+08:00</updated><id>http://localhost:4000/jekyll/update/2023/07/14/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/07/14/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Gao Yang</name><email>ygaolamb@foxmail.com</email></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>